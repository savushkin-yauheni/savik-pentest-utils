from abc import ABC, abstractmethod

from loguru import logger
from .io_utils import copytree, create_all_path_dirs, create_directory, get_file_extension, \
    get_file_name_from_path, join_path, path_exists, read_directory_dirs, read_directory_files, remove_folder
from .system import call_subprocess, call_subprocess_output

from .collections_utils import remove_empties


class ApkProviderError(Exception):
    pass


class ApkProvider(ABC):

    @abstractmethod
    def download_apk(self, apk_package: str) -> str:
        pass


def get_apk_provider() -> ApkProvider:
    return ApkeepApkProvider()


def extract_apk(apk_location: str, apk_folder: str):
    call_subprocess(f'apktool d {apk_location} -f -o {apk_folder}')
    extracted_apk_files = read_directory_files(apk_folder)
    android_manifest_exists = any(
        [apk_file for apk_file in extracted_apk_files if apk_file.name == 'AndroidManifest.xml'])
    if android_manifest_exists:
        return
    unknown_folder = join_path(apk_folder, 'unknown')
    apk_name = get_file_name_from_path(apk_location, extension=False)
    if not path_exists(unknown_folder):
        logger.debug(
            f'no android manifest file and no unknown folder: {apk_location} {apk_name}')
        raise Exception(f'invalid apk: {apk_name}')
    unknown_folder_files = read_directory_files(unknown_folder)
    original_apk_file = [
        possible_apk_file for possible_apk_file in unknown_folder_files
        if get_file_name_from_path(possible_apk_file.name, extension=False) == apk_name and 'apk' in get_file_extension(
            possible_apk_file.name)
    ]
    if not original_apk_file:
        extracted_apk_dirs = read_directory_dirs(apk_folder)
        logger.debug(
            f'no android manifest file, no apk file in unknown folder: {apk_location} {apk_name}'
            f' {str(extracted_apk_dirs)}, unknown folder: {str(unknown_folder_files)}')
        raise Exception(f'invalid apk: {apk_name}')
    else:
        if len(original_apk_file) > 1:
            logger.debug(f'original_apk_file len more than 1: {apk_name} {original_apk_file} . strange, check it.')
            raise Exception(f'invalid apk: {apk_name}')

        folder_for_unknown_apks = create_all_path_dirs(join_path(apk_folder, 'unknown_apks'))

        all_possible_apks = [
            possible_apk_file for possible_apk_file in unknown_folder_files
            if 'apk' in get_file_extension(possible_apk_file.name)
        ]

        for possible_apk in all_possible_apks:
            apk_name_in_unknown_folder = get_file_name_from_path(possible_apk.name, extension=True)
            try:
                apk_new_path_folder = create_all_path_dirs(join_path(
                    folder_for_unknown_apks, apk_name_in_unknown_folder))

                logger.debug(
                    f'[extract_apk] found apk in unknown folder ({apk_name_in_unknown_folder}), try to extract it')

                tmp_dir_for_another_apk = create_directory()
                extract_apk(
                    join_path(unknown_folder, apk_name_in_unknown_folder),
                    tmp_dir_for_another_apk
                )
                logger.debug(f'[extract_apk] copy content from: {tmp_dir_for_another_apk}, to: {apk_new_path_folder}')
                copytree(tmp_dir_for_another_apk, apk_new_path_folder)
            except Exception as ex:
                logger.exception(f'[extract_apk] extracting apk exception: {apk_name_in_unknown_folder} {ex}')
    remove_folder(unknown_folder)


class ApkeepApkProvider(ApkProvider):

    def download_apk(self, apk_package: str) -> str:
        apk_dir = create_directory()
        output = call_subprocess_output(f'apkeep -a {apk_package} {apk_dir} 2>&1')
        lines = remove_empties(output.split('\n'))
        if len(lines) > 2:
            raise ApkProviderError(output)

        if 'Could not get download URL' in str(output):
            raise ApkProviderError(f'No such apk: {apk_package}')

        files = read_directory_files(apk_dir)
        if not files or len(files) != 1:
            raise ApkProviderError(f'apkeep invalid format: {str(files)}')

        return files[0].path
