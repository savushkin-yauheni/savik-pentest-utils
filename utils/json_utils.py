import dataclasses
import json
import uuid
from datetime import date, datetime
from enum import Enum
from typing import Any, Dict

import dateutil.parser  # type: ignore


class BrokerJSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Enum):
            return str(o.value)
        if isinstance(o, uuid.UUID):
            return str(o)
        if dataclasses.is_dataclass(o):
            return dataclasses.asdict(o)
        if isinstance(o, set):
            return list(o)
        if isinstance(o, (datetime, date)):
            return o.isoformat()
        return o.__dict__


def convert_data_to_json_string(data: Any) -> str:
    return convert_object_to_json_str(data)


def convert_object_to_json_str(any_broker_message) -> str:
    try:
        return json.dumps(any_broker_message, cls=BrokerJSONEncoder)
    except RuntimeError as ex:
        if 'dictionary changed size during iteration' in str(ex):
            return json.dumps(any_broker_message, cls=BrokerJSONEncoder)
        raise ex


def parse_to_json(data: str) -> Dict:
    return json.loads(data)
